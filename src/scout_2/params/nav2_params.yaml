amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.05 #0.2
    alpha2: 0.05
    alpha3: 0.05
    alpha4: 0.05
    alpha5: 0.05
    base_frame_id: "base_link"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 12.0 #100
    laser_min_range: 0.1
    laser_model_type: "likelihood_field"
    max_beams: 360
    max_particles: 2000
    min_particles: 500
    odom_frame_id: odom
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0 #0
    recovery_alpha_slow: 0.0 #0
    resample_interval: 2
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.05 #0.2
    update_min_d: 0.125 #0.2
    z_hit: 0.95
    z_max: 0.99
    z_rand: 0.5
    z_short: 0.05
    odom_topic: /odom #/diff_drive_controller/odom
    #scan_topic: /scan  #/ouster/scan
    map_topic: /map

amcl_map_client:
  ros__parameters:
    use_sim_time: True

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: True


bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom #/diff_drive_controller/odom 
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    #default_nav_through_poses_bt_xml: #home/marco/gazebo_ws/src/scout_2/config/navigate_w_replanning.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    default_nav_through_poses_bt_xml: /home/marco/gazebo_ws/src/scout_2/config/navigate_through_poses_w_replanning_and_recovery.xml
    default_nav_to_pose_bt_xml: /home/marco/gazebo_ws/src/scout_2/config/navigate_to_pose_w_replanning_and_recovery.xml 
    #default_nav_through_poses_bt_xml: /opt/ros/humble/share/nav2_bt_navigator/behavior_trees/navigate_through_poses_w_replanning_and_recovery.xml # or $(find-pkg-share my_package)/behavior_tree/my_nav_through_poses_bt.xml
    # goal_blackboard_id: goal
    # goals_blackboard_id: goals
    # path_blackboard_id: path
    # navigators: ['navigate_to_pose', 'navigate_through_poses']
    # navigate_to_pose:
    #   plugin: "nav2_bt_navigator/NavigateToPoseNavigator"
    # navigate_through_poses:
    #   plugin: "nav2_bt_navigator/NavigateThroughPosesNavigator"
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True
    

# controller_server:
#   ros__parameters:
#     controller_frequency: 30.0
#     use_sim_time: True
#     odom_topic: /odom #"diff_drive_controller/odom"
#     progress_checker_plugin: "progress_checker"
#     goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
#     controller_plugins: ["FollowPath"]
#     # Progress checker parameters
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0
#     # Goal checker parameters
#     general_goal_checker:
#       stateful: True
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.2
#       yaw_goal_tolerance: 0.2
#     FollowPath:
#       plugin: "nav2_mppi_controller::MPPIController"
#       time_steps: 56
#       model_dt: 0.05
#       batch_size: 2000
#       vx_std: 0.2
#       vy_std: 0.2
#       wz_std: 0.4
#       vx_max: 0.5
#       vx_min: -0.35
#       vy_max: 0.5
#       wz_max: 1.9
#       iteration_count: 1
#       prune_distance: 1.7
#       transform_tolerance: 0.1
#       temperature: 0.3
#       gamma: 0.015
#       motion_model: "DiffDrive"
#       visualize: false
#       reset_period: 1.0 # (only in Humble)
#       regenerate_noises: false
#       TrajectoryVisualizer:
#         trajectory_step: 5
#         time_step: 3
#       AckermannConstraints:
#         min_turning_r: 0.2
#       critics: ["ConstraintCritic", "ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
#       ConstraintCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 4.0
#       GoalCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 5.0
#         threshold_to_consider: 1.4
#       GoalAngleCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 3.0
#         threshold_to_consider: 0.5
#       PreferForwardCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 5.0
#         threshold_to_consider: 0.5
#       ObstaclesCritic:
#         enabled: true
#         cost_power: 1
#         repulsion_weight: 1.5
#         critical_weight: 20.0
#         consider_footprint: false
#         collision_cost: 10000.0
#         collision_margin_distance: 0.1
#         near_goal_distance: 0.5
#         inflation_radius: 0.55 # (only in Humble)
#         cost_scaling_factor: 10.0 # (only in Humble)
#       PathAlignCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 14.0
#         max_path_occupancy_ratio: 0.05
#         trajectory_point_step: 3
#         threshold_to_consider: 0.5
#         offset_from_furthest: 20
#         use_path_orientations: false
#       PathFollowCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 5.0
#         offset_from_furthest: 5
#         threshold_to_consider: 1.4
#       PathAngleCritic:
#         enabled: true
#         cost_power: 1
#         cost_weight: 2.0
#         offset_from_furthest: 4
#         threshold_to_consider: 0.5
#         max_angle_to_furthest: 1.0
#         mode: 0
#       # TwirlingCritic:
#       #   enabled: true
#       #   twirling_cost_power: 1
#       #   twirling_cost_weight: 10.0



# controller_server:
#   ros__parameters:
#     use_sim_time: True
#     controller_frequency: 30.0
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.5
#     min_theta_velocity_threshold: 0.001
#     failure_tolerance: 0.0
#     odom_topic: /odom #"diff_drive_controller/odom"
#     progress_checker_plugin: "progress_checker"
#     goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
#     controller_plugins: ["FollowPath"]
#     # Progress checker parameters
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0
#     # Goal checker parameters
#     #precise_goal_checker:
#     #  plugin: "nav2_controller::SimpleGoalChecker"
#     #  xy_goal_tolerance: 0.25
#     #  yaw_goal_tolerance: 0.25
#     #  stateful: True
#     general_goal_checker:
#       stateful: True
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.2
#       yaw_goal_tolerance: 0.2
#     # DWB parameters
#     FollowPath:
#       plugin: "dwb_core::DWBLocalPlanner"
#       debug_trajectory_details: True
#       min_vel_x: -1.5
#       min_vel_y: 0.0
#       max_vel_x: 1.5
#       max_vel_y: 0.0
#       max_vel_theta: 0.7
#       min_speed_xy: 0.0
#       max_speed_xy: 0.3 #0.26
#       min_speed_theta: 0.0
#       # Add high threshold velocity for turtlebot 3 issue.
#       # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
#       acc_lim_x: 2.5
#       acc_lim_y: 0.0
#       acc_lim_theta: 3.2
#       decel_lim_x: -2.5
#       decel_lim_y: 0.0
#       decel_lim_theta: -3.2
#       vx_samples: 20
#       vy_samples: 5
#       vtheta_samples: 20
#       sim_time: 2.0
#       linear_granularity: 0.05
#       angular_granularity: 0.025
#       transform_tolerance: 0.2
#       xy_goal_tolerance: 0.25
#       trans_stopped_velocity: 0.25
#       short_circuit_trajectory_evaluation: True
#       stateful: True
#       critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
#       BaseObstacle.scale: 0.02
#       PathAlign.scale: 32.0
#       PathAlign.forward_point_distance: 0.1
#       GoalAlign.scale:  24.0
#       GoalAlign.forward_point_distance: 0.1
#       PathDist.scale: 32.0
#       GoalDist.scale: 24.0
#       RotateToGoal.scale: 32.0
#       RotateToGoal.slowing_factor: 5.0 #5.0
#       RotateToGoal.lookahead_time: 2.0 #-1.0

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    odom_topic: /odom #"diff_drive_controller/odom"
    progress_checker_plugins: "progress_checker" # progress_checker_plugin: "progress_checker" For Humble and older
    current_goal_checker_plugin: "goal_checker"
    controller_plugins: ["FollowPath"]

    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.40 #0.25
      yaw_goal_tolerance: 0.1744 #0.25
      stateful: True
    FollowPath:
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 0.30
      lookahead_dist: 0.8 #0.6
      min_lookahead_dist: 0.5
      max_lookahead_dist: 2.5
      lookahead_time: 4.0 #1.5
      rotate_to_heading_angular_vel: 1.0 #1.0
      transform_tolerance: 0.1
      use_velocity_scaled_lookahead_dist: False  #Whether to use the velocity scaled lookahead distances or constant lookahead distance
      min_approach_linear_velocity: 0.1
      approach_velocity_scaling_dist: 0.4 #0.6  The distance (m) left on the path at which to start slowing down. Should be less than the half the costmap width.
      cost_scaling_dist: 0.4
      inflation_cost_scaling_factor: 0.5
      use_collision_detection: true
      max_allowed_time_to_collision_up_to_carrot: 4.0 #1.0 The time (s) to project a velocity command forward to check for collisions when use_collision_detection is true
      use_regulated_linear_velocity_scaling: false #Whether to use the regulated features for path curvature (e.g. slow on high curvature paths).
      use_fixed_curvature_lookahead: false
      curvature_lookahead_dist: 0.25 #0.8 #0.25
      use_cost_regulated_linear_velocity_scaling: false #false Whether to use the regulated features for proximity to obstacles 
      regulated_linear_scaling_min_radius: 0.4 #The turning radius (m) for which the regulation features are triggered when use_regulated_linear_velocity_scaling is true. Remember, sharper turns have smaller radii.
      regulated_linear_scaling_min_speed: 0.20 #The minimum speed (m/s) for which any of the regulated heuristics can send, to ensure process is still achievable even in high cost spaces with high curvature
      use_rotate_to_heading: true
      allow_reversing: False
      rotate_to_heading_min_angle: 0.50
      max_angular_accel: 3.2
      max_robot_pose_search_dist: 8.0
      use_interpolation: true

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 10.0 #2.0
      global_frame: odom
      robot_base_frame: base_link
      #footprint_padding: 0.1
      use_sim_time: True
      static_map: false
      rolling_window: true
      width: 8
      height: 8
      resolution: 0.05
      publish_voxel_map: true
      footprint: "[ [0.4, 0.34], [0.4, -0.34], [-0.4, -0.34], [-0.4, 0.34] ]"
      plugins: ["voxel_layer","inflation_layer"] #"obstacle_layer"
      # obstacle_layer:
      #   plugin: "nav2_costmap_2d::ObstacleLayer"
      #   enabled: True
      #   footprint_clearing_enabled: true
      #   observation_sources: scan
      #   scan:
      #     topic: /scan #/ouster/scan
      #     max_obstacle_height: 2.0
      #     clearing: True
      #     marking: True
      #     data_type: "LaserScan"
      #     raytrace_max_range: 5.0 #5
      #     raytrace_min_range: 0.0
      #     obstacle_max_range: 3.5 #2.5
      #     obstacle_min_range: 0.0
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.0 #3.0
        inflation_radius: 0.50
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.2
        z_voxels: 10
        max_obstacle_height: 2.0
        min_obstacle_height: 0.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan #/ouster/scan
          sensor_frame: os_sensor_link
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan" #"PointCloud2"
          raytrace_max_range: 12.0 #3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 12.0 #2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        subscribe_to_updates: true
      always_send_full_costmap: True



global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0 #1.0
      publish_frequency: 1.0 #1.0
      #footprint_padding: 0.1
      static_map: true
      global_frame: map
      map_topic: /map
      robot_base_frame: base_link
      use_sim_time: True
      #robot_radius: 0.7
      footprint: "[ [0.4, 0.34], [0.4, -0.34], [-0.4, -0.34], [-0.4, 0.34] ]"
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer","obstacle_layer","inflation_layer"] #"voxel_layer" 
      # filters: ["keepout_filter"]
      # keepout_filter:
      #   plugin: "nav2_costmap_2d::KeepoutFilter"
      #   enabled: True
      #   filter_info_topic: "/costmap_filter_info"
      #   transform_tolerance: 0.1
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        footprint_clearing_enabled: true
        observation_sources: scan
        scan:
          topic: /scan #/ouster/scan
          max_obstacle_height: 2.0
          min_obstacle_height: 0.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 12.0 #5.0
          raytrace_min_range: 0.0
          obstacle_max_range: 12.0 #2.5
          obstacle_min_range: 0.0
      # voxel_layer:
      #   plugin: "nav2_costmap_2d::VoxelLayer"
      #   enabled: True
      #   footprint_clearing_enabled: true
      #   max_obstacle_height: 2.0
      #   publish_voxel_map: True
      #   origin_z: 0.0
      #   z_resolution: 0.05
      #   z_voxels: 16
      #   max_obstacle_height: 2.0
      #   unknown_threshold: 15
      #   mark_threshold: 0
      #   observation_sources: scan
      #   pointcloud:  # no frame set, uses frame from message
      #     topic: /scan
      #     max_obstacle_height: 2.0
      #     clearing: True
      #     marking: True
      #     data_type: "LaserScan"
      #     raytrace_max_range: 3.0
      #     raytrace_min_range: 0.0
      #     obstacle_max_range: 2.5
      #     obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        subscribe_to_updates: true
        transform_tolerance: 0.1
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.8
        cost_scaling_factor: 1.0 #1.0
        inflate_unknown: false
        inflate_around_unknown: true
      always_send_full_costmap: True


map_server:
  ros__parameters:
    use_sim_time: True
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 0.5
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 2.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.9
      use_astar: false #false
      allow_unknown: true
    # GridBased:
    #   plugin: "nav2_smac_planner/SmacPlanner2D"
    #   tolerance: 0.9                      # tolerance for planning if unable to reach exact pose, in meters
    #   downsample_costmap: false             # whether or not to downsample the map
    #   downsampling_factor: 1                # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
    #   allow_unknown: true                   # allow traveling in unknown space
    #   max_iterations: 1000000               # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
    #   max_on_approach_iterations: 1000      # maximum number of iterations to attempt to reach goal once in tolerance
    #   max_planning_time: 4.0           # max time in s for planner to plan, smooth
    #   cost_travel_multiplier: 2.0 #2.0          # Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
    #   use_final_approach_orientation: false # Whether to set the final path pose at the goal's orientation to the requested orientation (false) or in line with the approach angle so the robot doesn't rotate to heading (true)
    #   smoother:
    #     max_iterations: 1000
    #     w_smooth: 0.3
    #     w_data: 0.2
    #     tolerance: 1e-10

smoother_server:
  ros__parameters:
    smoother_plugins: ["constrained_smoother"] 
    constrained_smoother:
      plugin: "nav2_constrained_smoother/ConstrainedSmoother"
      reversing_enabled: true
      minimum_turning_radius: 0.0  # minimum turning radius the robot can perform.
      w_smooth: 2000000.0           # weight to maximize smoothness of path
      w_cost: 0.9               # weight to steer robot away from collision and cost
      
      w_cost_cusp_multiplier: 3.0   # se direction change which is ofteoption to use higher weight during forward/revern accompanied with dangerous rotations
      cusp_zone_length: 2.5    # length of the section around cusp in which nodes use w_cost_cusp_multiplier (w_cost rises gradually inside the zone towards the cusp point, whose costmap weight eqals w_cost*w_cost_cusp_multiplier)

      optimizer: 
        max_iterations: 70
        debug_optimizer: false
        linear_solver_type: "SPARSE_NORMAL_CHOLESKY"
        gradient_tol: 5e3
        fn_tol: 1.0e-15
        param_tol: 1.0e-20


# smoother_server:
#   ros__parameters:
#     use_sim_time: True
#     smoother_plugins: ["simple_smoother"]
#     simple_smoother:
#       plugin: "nav2_smoother::SimpleSmoother"
#       tolerance: 1.0e-10
#       max_its: 1000
#       do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_footprint/published_footprint
    cycle_frequency: 10.0
    #action_server_result_timeout: 120.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: map
    local_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: True
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

# velocity_smoother:
#   ros__parameters:
#     use_sim_time: True
#     smoothing_frequency: 10.0
#     scale_velocities: False
#     feedback: "OPEN_LOOP"
#     max_velocity: [1.5, 0.0, 1.0]
#     min_velocity: [-1.5, 0.0, -1.0]
#     max_accel: [2.5, 0.0, 3.2]
#     max_decel: [-2.5, 0.0, -3.2]
#     odom_topic: "odom" #"diff_drive_controller/odom"
#     odom_duration: 0.1
#     deadband_velocity: [0.0, 0.0, 0.0]
#     velocity_timeout: 1.0