## ekf config file ###
ekf_filter_node_odom:
    ros__parameters:

        use_sim_time: true
        frequency: 100.0

        # The period, in seconds, after which we consider a sensor to have timed out. In this event, we carry out a predict
        # cycle on the EKF without correcting it. This parameter can be thought of as the minimum frequency with which the
        # filter will generate new output. Defaults to 1 / frequency if not specified.
        sensor_timeout: 0.0

        # ekf_localization_node and ukf_localization_node both use a 3D omnidirectional motion model. If this parameter is
        # set to true, no 3D information will be used in your state estimate. Use this if you are operating in a planar
        # environment and want to ignore the effect of small variations in the ground plane that might otherwise be detected
        # by, for example, an IMU. Defaults to false if unspecified.
        two_d_mode: true

        # Use this parameter to provide an offset to the transform generated by ekf_localization_node. This can be used for
        # future dating the transform, which is required for interaction with some other packages. Defaults to 0.0 if
        # unspecified.
        transform_time_offset: 0.0

        # Use this parameter to provide specify how long the tf listener should wait for a transform to become available. 
        # Defaults to 0.0 if unspecified.
        transform_timeout: 0.0

        # If you're having trouble, try setting this to true, and then echo the /diagnostics_agg topic to see if the node is
        # unhappy with any settings or data.
        print_diagnostics: true

        # Debug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file specified by
        # debug_out_file. I hope you like matrices! Please note that setting this to true will have strongly deleterious
        # effects on the performance of the node. Defaults to false if unspecified.
        debug: false

        # Defaults to "robot_localization_debug.txt" if unspecified. Please specify the full path.
        #debug_out_file:

        # Whether to broadcast the transformation over the /tf topic. Defaults to true if unspecified.
        publish_tf: true

        # Whether to publish the acceleration state. Defaults to false if unspecified.
        publish_acceleration: false

        # If the filter sees a jump back in time, the filter is reset (convenient for testing with rosbags!)
        reset_on_time_jump: true
        map_frame: map                   # Defaults to "map" if unspecified
        odom_frame: odom                 # Defaults to "odom" if unspecified
        base_link_frame: base_footprint # Defaults to "base_link" if unspecified
        world_frame: odom                 # Defaults to the value of odom_frame if unspecified


        odom0: /odom
        odom0_config: [false, false, false,
                       false, false, false,
                       true,  true,  true,
                       false, false, true,
                       false, false, false]

        #        [x_pos   , y_pos    , z_pos,
        #         roll    , pitch    , yaw,
        #         x_vel   , y_vel    , z_vel,
        #         roll_vel, pitch_vel, yaw_vel,
        #         x_accel , y_accel  , z_accel]

        # If you have high-frequency data or are running with a low frequency parameter value, then you may want to increase
        # the size of the subscription queue so that more measurements are fused.
        odom0_queue_size: 2

        # [ADVANCED] Large messages in ROS can exhibit strange behavior when they arrive at a high frequency. This is a result
        # of Nagle's algorithm. This option tells the ROS subscriber to use the tcpNoDelay option, which disables Nagle's
        # algorithm.
        odom0_nodelay: false

        # [ADVANCED] When measuring one pose variable with two sensors, a situation can arise in which both sensors under-
        # report their covariances. This can lead to the filter rapidly jumping back and forth between each measurement as they
        # arrive. In these cases, it often makes sense to (a) correct the measurement covariances, or (b) if velocity is also
        # measured by one of the sensors, let one sensor measure pose, and the other velocity. However, doing (a) or (b) isn't
        # always feasible, and so we expose the differential parameter. When differential mode is enabled, all absolute pose
        # data is converted to velocity data by differentiating the absolute pose measurements. These velocities are then
        # integrated as usual. NOTE: this only applies to sensors that provide pose measurements; setting differential to true
        # for twist measurements has no effect.
        odom0_differential: false  # If using a real robot you might want to set this to true, since usually absolute measurements from real imu's are not very accurate

        # [ADVANCED] When the node starts, if this parameter is true, then the first measurement is treated as a "zero point"
        # for all future measurements. While you can achieve the same effect with the differential paremeter, the key
        # difference is that the relative parameter doesn't cause the measurement to be converted to a velocity before
        # integrating it. If you simply want your measurements to start at 0 for a given sensor, set this to true.
        odom0_relative: false

        # [ADVANCED] If your data is subject to outliers, use these threshold settings, expressed as Mahalanobis distances, to
        # control how far away from the current vehicle state a sensor measurement is permitted to be. Each defaults to
        # numeric_limits<double>::max() if unspecified. It is strongly recommended that these parameters be removed if not
        # required. Data is specified at the level of pose and twist variables, rather than for each variable in isolation.
        # For messages that have both pose and twist data, the parameter specifies to which part of the message we are applying
        # the thresholds.
        odom0_pose_rejection_threshold: 2.0
        odom0_twist_rejection_threshold: 0.5

        imu0: /imu/data
        imu0_config: [false, false, false,
                      false,  false,  true,
                      false, false, false,
                      false,  false,  false,
                      false,  false,  false]

        #        [x_pos   , y_pos    , z_pos,
        #         roll    , pitch    , yaw,
        #         x_vel   , y_vel    , z_vel,
        #         roll_vel, pitch_vel, yaw_vel,
        #         x_accel , y_accel  , z_accel]
        
        imu0_nodelay: false
        imu0_differential: false
        imu0_relative: false
        imu0_queue_size: 7
        imu0_pose_rejection_threshold: 0.8             # Note the difference in parameter names
        imu0_twist_rejection_threshold: 0.8                #
        imu0_linear_acceleration_rejection_threshold: 0.8  #

        # [ADVANCED] Some IMUs automatically remove acceleration due to gravity, and others don't. If yours doesn't, please set
        # this to true, and *make sure* your data conforms to REP-103, specifically, that the data is in ENU frame.
        imu0_remove_gravitational_acceleration: true

        # [ADVANCED]  The EKF and UKF models follow a standard predict/correct cycle. During prediction, if there is no
        # acceleration reference, the velocity at time t+1 is simply predicted to be the same as the velocity at time t. During
        # correction, this predicted value is fused with the measured value to produce the new velocity estimate. This can be
        # problematic, as the final velocity will effectively be a weighted average of the old velocity and the new one. When
        # this velocity is the integrated into a new pose, the result can be sluggish covergence. This effect is especially
        # noticeable with LIDAR data during rotations. To get around it, users can try inflating the process_noise_covariance
        # for the velocity variable in question, or decrease the  variance of the variable in question in the measurement
        # itself. In addition, users can also take advantage of the control command being issued to the robot at the time we
        # make the prediction. If control is used, it will get converted into an acceleration term, which will be used during
        # predicition. Note that if an acceleration measurement for the variable in question is available from one of the
        # inputs, the control term will be ignored.
        # Whether or not we use the control input during predicition. Defaults to false.
        use_control: false
        # Whether the input (assumed to be cmd_vel) is a geometry_msgs/Twist or geometry_msgs/TwistStamped message. Defaults to
        # false.
        stamped_control: false
        # The last issued control command will be used in prediction for this period. Defaults to 0.2.
        control_timeout: 0.2
        # Which velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
        control_config: [true, false, false, false, false, true]
        # Places limits on how large the acceleration term will be. Should match your robot's kinematics.
        acceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 3.4]
        # Acceleration and deceleration limits are not always the same for robots.
        deceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 4.5]
        # If your robot cannot instantaneously reach its acceleration limit, the permitted change can be controlled with these
        # gains
        acceleration_gains: [0.8, 0.0, 0.0, 0.0, 0.0, 0.9]
        # If your robot cannot instantaneously reach its deceleration limit, the permitted change can be controlled with these
        # gains
        deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]
        # [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
        # exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
        # prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
        # However, if users find that a given variable is slow to converge, one approach is to increase the
        # process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
        # to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
        # ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
        # unspecified.
        process_noise_covariance: [0.05,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.05,   0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.06,   0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.03,   0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.03,   0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.06,   0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.025,   0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.025,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.04,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01,   0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01,   0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.02,   0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.01,   0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.01,   0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.015]

                                
ekf_filter_node_map:
  ros__parameters:

    use_sim_time: true


    frequency: 100.0
    sensor_timeout: 0.0
    two_d_mode: true
    transform_time_offset: 0.0
    transform_timeout: 0.0
    print_diagnostics: true
    debug: false

    # Whether to broadcast the transformation over the /tf topic. Defaults to true if unspecified.
    publish_tf: true

    # If the filter sees a jump back in time, the filter is reset (convenient for testing with rosbags!)
    reset_on_time_jump: true

    map_frame: map
    odom_frame: odom
    base_link_frame: base_footprint
    world_frame: map

    odom0: /odom
    odom0_config: [false, false, false,
                   false, false, false,
                   true,  true,  true,
                   false, false, true,
                   false, false, false]
    odom0_queue_size: 2
    odom0_nodelay: false
    odom0_differential: false
    odom0_relative: false
    odom0_pose_rejection_threshold: 0.5
    odom0_twist_rejection_threshold: 0.5

    odom1: /odometry/gps
    odom1_config: [true,  true,  false,
                   false, false, false,
                   false, false, false,
                   false, false, false,
                   false, false, false]
    odom1_queue_size: 10
    odom1_nodelay: false
    odom1_differential: false
    odom1_relative: false
    odom1_pose_rejection_threshold: 0.5
    odom1_twist_rejection_threshold: 0.5

    imu0: /imu/data
    imu0_config: [false, false, false,
                  false,  false,  true,
                  false, false, false,
                  false,  false,  false,
                  false,  false,  false]
    imu0_nodelay: false
    imu0_differential: false # If using a real robot you might want to set this to true, since usually absolute measurements from real imu's are not very accurate
    imu0_relative: false
    imu0_queue_size: 7
    imu0_pose_rejection_threshold: 0.5                 # Note the difference in parameter names
    imu0_twist_rejection_threshold: 0.5                #
    imu0_linear_acceleration_rejection_threshold: 0.5  #
    imu0_remove_gravitational_acceleration: true

    use_control: false

    process_noise_covariance: [0.05,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                               0.0,    0.05,   0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                               0.0,    0.0,    0.06,   0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                               0.0,    0.0,    0.0,    0.03,   0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                               0.0,    0.0,    0.0,    0.0,    0.03,   0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                               0.0,    0.0,    0.0,    0.0,    0.0,    0.06,   0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                               0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.025,   0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                               0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.025,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                               0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.04,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                               0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01,   0.0,    0.0,    0.0,    0.0,    0.0,
                               0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01,   0.0,    0.0,    0.0,    0.0,
                               0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.02,   0.0,    0.0,    0.0,
                               0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.01,   0.0,    0.0,
                               0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.01,   0.0,
                               0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.015]

navsat_transform:
  ros__parameters:
    use_sim_time: true
    frequency: 100.0
    delay: 3.0
    magnetic_declination_radians: 0.0  # For lat/long of Milano, Italia
    yaw_offset: 0.0 # if IMU reads 0 when facing magnetic north instead of east then set parameter to pi/2
    zero_altitude: true
    broadcast_cartesian_transform: true
    broadcast_cartesian_transform_as_parent_frame: true
    publish_filtered_gps: true
    use_odometry_yaw: false
    wait_for_datum: false
    #datum: [0.0, 0.0, 0.0]